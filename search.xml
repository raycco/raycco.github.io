<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Android Audio Server启动]]></title>
    <url>%2F2017%2F11%2F08%2FAndroid-Audio-Server%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[audioserver源代码的位置位于frameworks/av/media/audioserver 从Android 7.0开始，Audio相关的service从mediaserver中转移到audioserver，把audio，camera及mediaplayerservice做了一个拆分，这样不会显得臃肿、职能更加独立且安全性更高。拆分之后audioserver还是一个native service，还是从init进程中启动，如下是其在audioserver.rc中的启动代码。 12345678910service audioserver /system/bin/audioserver class main # audioserver和class main行为一致 user audioserver # 用户归属，uid：AID_AUDIOSERVER # media gid needed for /dev/fm (radio) and for /data/misc/media (tee) group audio camera drmrpc inet media mediadrm net_bt \ net_bt_admin net_bw_acct oem_2901 # 用户组归属 ioprio rt 4 # io调度优先级 # 当子进程被创建的时候，将子进程的pid写入到给定的文件中,cgroup/cpuset用法 writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks onrestart restart audio-hal-2-0 # audioserver重启会重启hal 我们看到Android 8.0当重启audioserver时，会重启audio-hal-2-0，这个服务是audio hal的服务，在android 8.0中，framework native进程与hal分离，hal不在和framework native处于同一个进程，而是独立进程，进程间通过binder通信。先不讲HAL binder化，我们先看看audioserver中包含哪几个服务。123456789101112131415161718192021222324252627282930313233int main(int argc __unused, char **argv)&#123; signal(SIGPIPE, SIG_IGN); bool doLog = (bool) property_get_bool("ro.test_harness", 0); pid_t childPid; ...... if (doLog &amp;&amp; (childPid = fork()) != 0) &#123; ...... &#125; else &#123; sp&lt;ProcessState&gt; proc(ProcessState::self()); sp&lt;IServiceManager&gt; sm = defaultServiceManager(); ALOGI("ServiceManager: %p", sm.get()); AudioFlinger::instantiate(); AudioPolicyService::instantiate(); AAudioService::instantiate(); RadioService::instantiate(); SoundTriggerHwService::instantiate(); ProcessState::self()-&gt;startThreadPool();// FIXME: remove when BUG 31748996 is fixed android::hardware::ProcessState::self()-&gt;startThreadPool(); IPCThreadState::self()-&gt;joinThreadPool(); &#125;&#125; 从如上代码可以看出，audioserver中回依次实例化AudioFlinger、AudioPolicyService、AAudioService、RadioService、SoundTriggerHwService并添加到ServiceManager中。 AudioFlinger：Audio系统的一个核心服务，是音频策略的执行者，负责输入输出流设备的管理及音频流数据的处理传输。 AudioPolicyService：音频策略的制定者，负责音频设备切换的策略抉择、音量调节策略等。 AAudioService：这是Android 8.0加入角色，是OpenSL ES的另外一种选择，需要低延迟的高性能音频应用的另外一种选择。 RadioService：与FM相关的一个服务。 SoundTriggerHwService：Android语音识别的native服务。 参考：http://blog.csdn.net/fu_kevin0606/article/details/53383031]]></content>
      <categories>
        <category>Android Audio</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub搭建个人的博客]]></title>
    <url>%2F2017%2F10%2F30%2FGitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文记录在Windows环境下使用Hexo搭建GitHub博客的过程。 安装Node.js在nodejs官网下载对应的版本安装下载地址：https://nodejs.org/en/download 安装Git下载地址：https://git-for-windows.github.io 创建GitHub账户进入GitHub主页https://github.com/，依次输入用户名、邮箱、密码，然后点击注册，按默认点击“Finish sign up”。然后进行邮箱验证。 创建GitHub仓库点击“New repository”，新建一个仓库，仓库名为“[yourname].github.io”，这样https://[yourname].github.io 就是你的博客地址了。默认这仓库只有master分支，新建一个hexo分支。 配置Hexo接下来的命令都在Git Bash中执行。 在自己喜欢的位置新建一个blog文件夹，在这个文件夹下打开Git Bash，因为npm是国外服务器，可能执行比较慢，可以使用淘宝镜像，命令如下： $ npm install -g cnpm --registry=https://registry.npm.taobao.org 执行成功后使用淘宝NPM安装Hexo $ cnpm install -g hexo-cli $ cnmp install hexo --save $ hexo -v hexo: 3.4.0 hexo-cli: 1.0.4 os: Windows_NT 6.1.7600 win32 ia32 http_parser: 2.7.0 node: 8.7.0 v8: 6.1.534.42 uv: 1.15.0 zlib: 1.2.11 ares: 1.10.1-DEV modules: 57 nghttp2: 1.25.0 openssl: 1.0.2l icu: 59.1 unicode: 9.0 cldr: 31.0.1 tz: 2017b 到这里hexo已经安装好了 配置ssh keyssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 在C:\Users\yourname\.ssh下会得到密钥id_rsa和id_rsa.pub，用nodepad++打开id_rsa.pub复制全文，打开https://github.com/settings/ssh，Add SSH key，粘贴进去保存。 测试是否配置成功 $ ssh -T git@github.com Hi [yourname]! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 配置git信息$ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; 使用Hexo管理博客初始化博客$ hexo init &lt;nodejs-hexo&gt; //初始化nodejs-hexo（文件夹名随意） $ git clone -b hexo https://github.com/[yourname]/[yourname].github.io 将[yourname].github.io文件夹下的.git文件夹拷贝到nodejs-hexo文件夹。 $ cnpm install //安装生成器 $ hexo server //运行（Ctrl + C停止运行） 在浏览器输入localhost:4000，这样就可以在本地看到博客了。 配置博客_config.yml中配置基本信息 title: #博客标题 subtitle: #博客副标题 description: #博客描述 author: #博客作者 language: zh-Hans timezone: Asia/Shanghai _config.yml中配置主题 theme: next _config.yml中配置部署 deploy: type: git repo: https://github.com/[yourname]/[yourname].github.io branch: master 注意：这里的设置冒号后面必须有空格 发布博客$ hexo new &quot;博客名&quot; //增加新文章 $ cnpm install hexo-deployer-git --save //安装hexo git插件 $ git add . $ git commit -m &quot;message&quot; $ git push origin hexo $ hexo generate //生成静态文件 $ hexo deploy //部署 换PC管理博客$ git clone -b hexo https://github.com/[yourname]/[yourname].github.io 在[yourname].github.io中从新安装hexo，就可以写博客及发布博客了。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
